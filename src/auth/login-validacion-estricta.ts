// ==================== LOGIN ULTRA-ESPEC√çFICO QUE S√ç VALIDA ====================
// Esta versi√≥n realmente valida credenciales y rechaza incorrectas

import { 
  signInWithEmailAndPassword, 
  createUserWithEmailAndPassword,
  updateProfile,
  AuthError 
} from 'firebase/auth';
import { 
  doc, 
  setDoc, 
  getDoc,
  serverTimestamp
} from 'firebase/firestore';
import { auth, db } from './config/firebase';
import { Alert } from 'react-native';

// ==================== INTERFACES ====================

export interface LoginResult {
  success: boolean;
  user?: any;
  token?: string;
  message?: string;
  errorMessage?: string;
  errorCode?: string;
  errorDetails?: any;
}

// ==================== FUNCI√ìN DE LOGIN CON VALIDACI√ìN REAL ====================

export const loginConValidacion = async (email: string, password: string): Promise<LoginResult> => {
  console.log('üîê ========== INICIANDO LOGIN CON VALIDACI√ìN ==========');
  console.log('üìß Email recibido:', email);
  console.log('üîë Password recibido:', password ? '***OCULTO***' : 'VAC√çO');
  console.log('üî• Estado de auth:', auth ? 'Configurado' : 'NO configurado');

  // VALIDACIONES PRELIMINARES ESTRICTAS
  if (!email) {
    console.log('‚ùå VALIDACI√ìN FALL√ì: Email vac√≠o');
    return {
      success: false,
      errorMessage: 'El email no puede estar vac√≠o',
      errorCode: 'validation/empty-email'
    };
  }

  if (!password) {
    console.log('‚ùå VALIDACI√ìN FALL√ì: Password vac√≠o');
    return {
      success: false,
      errorMessage: 'La contrase√±a no puede estar vac√≠a',
      errorCode: 'validation/empty-password'
    };
  }

  // Validar formato de email
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!emailRegex.test(email.trim())) {
    console.log('‚ùå VALIDACI√ìN FALL√ì: Email inv√°lido');
    return {
      success: false,
      errorMessage: 'Formato de email inv√°lido',
      errorCode: 'validation/invalid-email'
    };
  }

  console.log('‚úÖ Validaciones preliminares pasadas');

  try {
    console.log('üî• Intentando autenticaci√≥n con Firebase...');
    console.log('üìß Email procesado:', email.trim().toLowerCase());
    
    // INTENTAR AUTENTICACI√ìN - AQU√ç ES DONDE DEBE FALLAR CON CREDENCIALES INCORRECTAS
    const userCredential = await signInWithEmailAndPassword(
      auth, 
      email.trim().toLowerCase(), 
      password
    );

    console.log('‚úÖ Firebase Auth SUCCESS - Credenciales CORRECTAS');
    console.log('üë§ Usuario autenticado:', userCredential.user.uid);
    console.log('üìß Email verificado:', userCredential.user.email);

    // Si llegamos aqu√≠, las credenciales SON CORRECTAS
    const firebaseUser = userCredential.user;
    const token = await firebaseUser.getIdToken();

    // Intentar obtener datos adicionales
    let userData = null;
    try {
      const userDoc = await getDoc(doc(db, 'users', firebaseUser.uid));
      if (userDoc.exists()) {
        userData = userDoc.data();
        console.log('üíæ Datos adicionales obtenidos:', userData?.name);
      }
    } catch (firestoreError) {
      console.warn('‚ö†Ô∏è Sin datos adicionales en Firestore');
    }

    const resultado = {
      success: true,
      user: {
        uid: firebaseUser.uid,
        email: firebaseUser.email,
        name: userData?.name || firebaseUser.displayName || 'Usuario',
        progress: userData?.progress || 0,
        roleId: userData?.roleId || 'role_student'
      },
      token: token,
      message: `¬°Bienvenido de vuelta!`
    };

    console.log('üéâ LOGIN EXITOSO COMPLETO');
    return resultado;

  } catch (error: any) {
    // AQU√ç ES DONDE DEBEN CAER LAS CREDENCIALES INCORRECTAS
    console.log('‚ùå ========== ERROR DE FIREBASE AUTH ==========');
    console.log('‚ùå Error tipo:', typeof error);
    console.log('‚ùå Error code:', error?.code);
    console.log('‚ùå Error message:', error?.message);
    console.log('‚ùå Error completo:', error);

    // Verificar si es un error espec√≠fico de Firebase
    if (error && error.code) {
      console.log('üî• Es un error de Firebase Auth');
      
      let errorMessage = 'Error de autenticaci√≥n';
      
      switch (error.code) {
        case 'auth/invalid-credential':
          console.log('‚ùå CREDENCIALES INV√ÅLIDAS');
          errorMessage = 'Email o contrase√±a incorrectos';
          break;
        case 'auth/wrong-password':
          console.log('‚ùå CONTRASE√ëA INCORRECTA');
          errorMessage = 'Contrase√±a incorrecta';
          break;
        case 'auth/user-not-found':
          console.log('‚ùå USUARIO NO ENCONTRADO');
          errorMessage = 'No existe un usuario con ese email';
          break;
        case 'auth/invalid-email':
          console.log('‚ùå EMAIL INV√ÅLIDO');
          errorMessage = 'Formato de email inv√°lido';
          break;
        case 'auth/user-disabled':
          console.log('‚ùå USUARIO DESHABILITADO');
          errorMessage = 'Esta cuenta ha sido deshabilitada';
          break;
        case 'auth/too-many-requests':
          console.log('‚ùå DEMASIADOS INTENTOS');
          errorMessage = 'Demasiados intentos fallidos. Espera un momento';
          break;
        case 'auth/network-request-failed':
          console.log('‚ùå ERROR DE RED');
          errorMessage = 'Error de conexi√≥n a internet';
          break;
        default:
          console.log('‚ùå ERROR DESCONOCIDO:', error.code);
          errorMessage = `Error de Firebase: ${error.message}`;
      }

      console.log('‚ùå Mensaje final:', errorMessage);
      
      return {
        success: false,
        errorMessage: errorMessage,
        errorCode: error.code,
        errorDetails: error
      };
    } else {
      // Error no relacionado con Firebase
      console.log('‚ùå ERROR NO ES DE FIREBASE');
      console.log('‚ùå Error gen√©rico:', error);
      
      return {
        success: false,
        errorMessage: `Error inesperado: ${error?.message || 'Error desconocido'}`,
        errorCode: 'unknown/error',
        errorDetails: error
      };
    }
  }
};

// ==================== FUNCI√ìN DE TESTING ESPEC√çFICA ====================

export const probarCredencialesEspecificas = async () => {
  console.log('üß™ ========== PROBANDO CREDENCIALES ESPEC√çFICAS ==========');

  // Test 1: Credenciales obviamente incorrectas
  console.log('\nüß™ TEST 1: Credenciales incorrectas');
  const test1 = await loginConValidacion('noexiste@ejemplo.com', 'passwordIncorrecto');
  console.log('Resultado Test 1:', test1.success ? '‚ùå INCORRECTO (deber√≠a fallar)' : '‚úÖ CORRECTO (fall√≥ como esperado)');
  console.log('Mensaje:', test1.errorMessage);

  // Test 2: Email vac√≠o
  console.log('\nüß™ TEST 2: Email vac√≠o');
  const test2 = await loginConValidacion('', 'password');
  console.log('Resultado Test 2:', test2.success ? '‚ùå INCORRECTO' : '‚úÖ CORRECTO');
  console.log('Mensaje:', test2.errorMessage);

  // Test 3: Password vac√≠o
  console.log('\nüß™ TEST 3: Password vac√≠o');
  const test3 = await loginConValidacion('test@email.com', '');
  console.log('Resultado Test 3:', test3.success ? '‚ùå INCORRECTO' : '‚úÖ CORRECTO');
  console.log('Mensaje:', test3.errorMessage);

  // Test 4: Email mal formateado
  console.log('\nüß™ TEST 4: Email mal formateado');
  const test4 = await loginConValidacion('emailinvalido', 'password');
  console.log('Resultado Test 4:', test4.success ? '‚ùå INCORRECTO' : '‚úÖ CORRECTO');
  console.log('Mensaje:', test4.errorMessage);

  console.log('\nüß™ ========== TESTING COMPLETADO ==========');
  
  // Mostrar resumen
  const resultados = [test1, test2, test3, test4];
  const exitosos = resultados.filter(r => r.success).length;
  const fallidos = resultados.filter(r => !r.success).length;
  
  console.log(`üìä RESUMEN: ${fallidos} tests fallaron correctamente, ${exitosos} tests pasaron incorrectamente`);
  
  if (exitosos > 0) {
    console.log('‚ùå PROBLEMA: Algunos tests que deber√≠an fallar est√°n pasando');
    Alert.alert(
      '‚ùå Problema Detectado', 
      `${exitosos} tests est√°n pasando cuando deber√≠an fallar. Tu login no est√° validando correctamente.`
    );
  } else {
    console.log('‚úÖ PERFECTO: Todos los tests fallaron como esperado');
    Alert.alert(
      '‚úÖ Validaci√≥n Correcta', 
      'Las validaciones est√°n funcionando correctamente. El sistema rechaza credenciales incorrectas.'
    );
  }

  return { exitosos, fallidos };
};

// ==================== FUNCI√ìN PARA CREAR USUARIO Y PROBAR ====================

export const crearUsuarioYProbar = async () => {
  console.log('üß™ ========== CREAR USUARIO Y PROBAR LOGIN ==========');

  // Crear usuario √∫nico
  const timestamp = Date.now();
  const email = `test${timestamp}@prueba.com`;
  const password = 'Test123456';
  const name = 'Usuario Test';

  console.log(`üìß Creando usuario: ${email}`);
  
  try {
    // Registrar usuario
    const userCredential = await createUserWithEmailAndPassword(auth, email, password);
    await updateProfile(userCredential.user, { displayName: name });
    
    console.log('‚úÖ Usuario creado exitosamente');
    
    // Probar login con credenciales correctas
    console.log('\nüîê Probando login con credenciales CORRECTAS...');
    const loginCorrecto = await loginConValidacion(email, password);
    
    if (loginCorrecto.success) {
      console.log('‚úÖ Login con credenciales correctas: EXITOSO');
    } else {
      console.log('‚ùå Login con credenciales correctas: FALL√ì (esto es un problema)');
    }
    
    // Probar login con contrase√±a incorrecta
    console.log('\nüîê Probando login con contrase√±a INCORRECTA...');
    const loginIncorrecto = await loginConValidacion(email, 'passwordIncorrecto');
    
    if (!loginIncorrecto.success) {
      console.log('‚úÖ Login con credenciales incorrectas: RECHAZADO (correcto)');
    } else {
      console.log('‚ùå Login con credenciales incorrectas: ACEPTADO (esto es un problema)');
    }

    Alert.alert(
      'Test Completado',
      `Usuario creado: ${email}\n\nLogin correcto: ${loginCorrecto.success ? 'OK' : 'FALL√ì'}\nLogin incorrecto: ${!loginIncorrecto.success ? 'RECHAZADO (OK)' : 'ACEPTADO (PROBLEMA)'}`
    );

    return {
      usuarioCreado: { email, password },
      loginCorrecto: loginCorrecto.success,
      loginIncorrecto: !loginIncorrecto.success
    };

  } catch (error) {
    console.error('‚ùå Error creando usuario:', error);
    Alert.alert('Error', `No se pudo crear usuario: ${error}`);
    return null;
  }
};

// ==================== LOGGING ====================

if (__DEV__) {
  console.log('üîß LOGIN CON VALIDACI√ìN ESTRICTA CARGADO');
  console.log('Funciones disponibles:');
  console.log('- loginConValidacion(email, password)');
  console.log('- probarCredencialesEspecificas()');
  console.log('- crearUsuarioYProbar()');
}